service: family-manager

app: family-manager
org: igorpestana

frameworkVersion: "3"

provider:
  name: aws
  region: us-east-1
  runtime: go1.x
  environment:
    ENVIRONMENT: ${opt:stage, self:provider.stage}
    DYNAMODB_TRANSACTION_TABLE: fm-transaction-table-${opt:stage, self:provider.stage}
    DYNAMODB_CATEGORY_TABLE: fm-category-table-${opt:stage, self:provider.stage}
    DYNAMODB_TRANSACTION_REGION: us-east-1
    DYNAMODB_TRANSACTION_ENDPOINT: ${self:service}-${opt:stage, self:provider.stage}
    
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/fm-*"

functions:
  auth:
    name: fm-${opt:stage, self:provider.stage}-auth
    handler: bin/auth
    package:
      include:
        - ./bin/create-transaction
    environment:
      AUTH0_DOMAIN: ${env:AUTH0_DOMAIN}
      AUTH0_AUDIENCE: ${env:AUTH0_AUDIENCE}

  create-transactions:
    name: fm-${opt:stage, self:provider.stage}-create-transactions
    handler: bin/create-transaction
    package:
      include:
        - ./bin/create-transaction
    events:
      - http:
          path: transactions
          method: post
          authorizer: auth
          cors: true

  list-transactions:
    name: fm-${opt:stage, self:provider.stage}-list-transactions
    handler: bin/list-transactions
    package:
      include:
        - ./bin/list-transactions
    events:
      - http:
          path: transactions
          method: get
          authorizer: auth
          cors: true

  report-transactions:
    name: fm-${opt:stage, self:provider.stage}-report-transactions
    handler: bin/report-transactions
    package:
      include:
        - ./bin/report-transactions
    events:
      - http:
          path: report
          method: get
          authorizer: auth
          cors: true

  create-categories:
    name: fm-${opt:stage, self:provider.stage}-create-categories
    handler: bin/create-categories
    package:
      include:
        - ./bin/create-categories
    events:
      - http:
          path: categories
          method: post
          authorizer: auth
          cors: true

  list-categories:
    name: fm-${opt:stage, self:provider.stage}-list-categories
    handler: bin/list-categories
    package:
      include:
        - ./bin/list-categories
    events:
      - http:
          path: categories
          method: get
          authorizer: auth
          cors: true

  order-categories:
    name: fm-${opt:stage, self:provider.stage}-order-categories
    handler: bin/order-categories
    package:
      include:
        - ./bin/order-categories
    events:
      - http:
          path: categories/order
          method: put
          authorizer: auth
          cors: true
resources:
  Mappings:
    DomainMap:
      dev:
        domain: dev.controlefamiliar.com
      staging:
        domain: staging.controlefamiliar.com
      prod:
        domain: www.controlefamiliar.com

  Resources:
    FmTransactionDynamoTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: MonthYear
            AttributeType: S
          - AttributeName: CategoryTransactionId
            AttributeType: S
        KeySchema:
          - AttributeName: MonthYear
            KeyType: HASH
          - AttributeName: CategoryTransactionId
            KeyType: RANGE
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TRANSACTION_TABLE}
    FmCategoryDynamoTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: Name
            AttributeType: S
          - AttributeName: Priority
            AttributeType: N
        KeySchema:
          - AttributeName: Name
            KeyType: HASH
          - AttributeName: Priority
            KeyType: RANGE
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_CATEGORY_TABLE}
    FmDashboardFrontendBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName:
          !FindInMap [
            DomainMap,
            "${opt:stage, self:provider.stage}",
            domain,
          ]
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html
    FmDashboardFrontendBucketPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        Bucket: !Ref FmDashboardFrontendBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                - "s3:GetObject"
              Effect: Allow
              Resource: !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref FmDashboardFrontendBucket
                  - /*
              Principal: "*"
    FmDashboardFrontendCloudFrontDistribution:
      Type: "AWS::CloudFront::Distribution"
      Properties:
        DistributionConfig:
          Origins:
            - CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: http-only
                OriginSSLProtocols:
                  - TLSv1
                  - TLSv1.1
                  - TLSv1.2
              DomainName: !Select [1, !Split ["//", !GetAtt FmDashboardFrontendBucket.WebsiteURL]]
              Id:
                !FindInMap [
                  DomainMap,
                  "${opt:stage, self:provider.stage}",
                  domain,
                ]
          Enabled: true
          DefaultRootObject: index.html

          DefaultCacheBehavior:
            ViewerProtocolPolicy: redirect-to-https
            Compress: true
            AllowedMethods:
              - HEAD
              - DELETE
              - POST
              - GET
              - OPTIONS
              - PUT
              - PATCH
            CachedMethods:
              - GET
              - HEAD
            TargetOriginId:
              !FindInMap [
                DomainMap,
                "${opt:stage, self:provider.stage}",
                domain,
              ]
            MinTTL: 0
            DefaultTTL: 86400
            MaxTTL: 31536000

            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none

          CustomErrorResponses:
            - ErrorCachingMinTTL: 3000
              ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: "/index.html"

          Aliases:
            - !FindInMap [
                DomainMap,
                "${opt:stage, self:provider.stage}",
                domain,
              ]

          Restrictions:
            GeoRestriction:
              RestrictionType: none

          ViewerCertificate:
            AcmCertificateArn: arn:aws:acm:us-east-1:090473733073:certificate/4fb33cbb-8966-4089-b40e-8e41e38d5c85
            SslSupportMethod: sni-only
        Tags:
          - Key: env
            Value: ${opt:stage, self:provider.stage}